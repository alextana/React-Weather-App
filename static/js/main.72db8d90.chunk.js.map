{"version":3,"sources":["components/Nav.js","components/Search.js","components/Location.js","components/Home.js","components/LocationWeather.js","components/LocationDetails.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","Search","search","updateSearch","setSearch","getSearch","onSubmit","type","placeholder","value","onChange","Location","locationKey","postalCode","country","name","to","Home","useState","locations","setLocation","query","setQuery","useEffect","getLocation","a","fetch","process","response","json","data","console","log","e","target","preventDefault","map","location","key","Key","PrimaryPostalCode","Country","ID","EnglishName","LocationWeather","temperature","locationTime","locationWeather","LocationDetails","match","getForecast","params","Object","keys","obj","IsDayTime","WeatherText","App","path","exact","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72db8d90.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Nav() {\r\n    return (\r\n        <div className=\"navigation__head w-100 py-3 text-center\">\r\n            <h1>Weather App</h1>\r\n            <p>My first react project</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\r\n\r\n\r\n\r\n\r\n\r\nfunction Search({search, setSearch, updateSearch, getSearch}) {\r\n    return (\r\n<div>\r\n        <div className=\"title__app py-3 text-center\">\r\n            <h2>Type your location in the searchbar</h2>\r\n        </div>\r\n         <form onSubmit={getSearch} className=\"form-group py-3\">\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search\" value={search} onChange={updateSearch}/>\r\n                </div>\r\n                <div className=\"col-auto\">\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Location({locationKey, postalCode, country, name}) {\r\n    return (\r\n        <div className=\"col-6 py-3\">\r\n            <div className=\"card shadow p-3\">\r\n            <h2>{name}</h2>\r\n            <p>{country}</p>\r\n            <p>{postalCode}</p>\r\n            <h3>{locationKey}</h3>\r\n            <Link to={`/LocationDetails/${locationKey}`} className=\"btn btn-primary my-3\">Find out More</Link>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Location\r\n","import React, {useState, useEffect} from 'react'\r\nimport Search from './Search';\r\nimport Location from './Location';\r\n\r\n\r\n\r\nfunction Home() {\r\n\r\n\r\n  // States\r\n  const[locations,setLocation] = useState([]);\r\n  const[search,setSearch] = useState('');\r\n  const[query,setQuery] = useState('');\r\n  \r\n\r\n  useEffect(() => {\r\n    getLocation();\r\n  },[query]);\r\n\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  }\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n  }  \r\n\r\n  const getLocation = async () => {\r\n    const response = await fetch(`https://dataservice.accuweather.com/locations/v1/cities/search?apikey=${process.env.REACT_APP_API_KEY}&q=${query}&language=en-us`);\r\n    const data = await response.json();\r\n    setLocation(data);\r\n    console.log(data);\r\n  }\r\n\r\n\r\n    return (\r\n        <div>\r\n      <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <Search search={search} updateSearch={updateSearch} getSearch={getSearch} setSearch={setSearch}/>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    <div className=\"row justify-content-center\">\r\n      {locations.map(location=>(\r\n        <Location key={location.Key} postalCode={location.PrimaryPostalCode} locationKey={location.Key} country={location.Country.ID} name={location.EnglishName}/> \r\n      ))}\r\n    </div>\r\n    </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction LocationWeather({temperature, locationTime, locationWeather}) {\r\n    return (\r\n        <div>\r\n        <div className={`pt-2 pb-5 ${locationTime === true ? \"daytime__head head\" : \"nighttime__head head\"}`}>\r\n            <div className=\"weather__condition px-5\">\r\n            <Link to=\"/\" className=\"btn btn-primary mb-5\">Back to Home</Link>\r\n                <h2 className=\"pt-2 pb-5\">\r\n                {locationWeather}\r\n                {temperature}\r\n                </h2>\r\n            </div>\r\n        </div>    \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default LocationWeather\r\n","import React, {useState, useEffect} from 'react'\r\n\r\nimport LocationWeather from './LocationWeather';\r\n\r\n\r\n\r\nfunction LocationDetails({match}) {\r\n    const[location, setLocation] = useState({});\r\n    \r\n    useEffect(() => {\r\n        getForecast();\r\n    }, []);\r\n\r\n    const getForecast = async () => {\r\n        const response = await fetch(`https://dataservice.accuweather.com/currentconditions/v1/${match.params.locationKey}?apikey=${process.env.REACT_APP_API_KEY}`);\r\n        const data = await response.json();\r\n        setLocation(data);\r\n        console.log(data);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container-fluid px-0\">\r\n        <div>\r\n            {Object.keys(location).map(obj =>\r\n                <LocationWeather locationTime={location[obj].IsDayTime} locationWeather={location[obj].WeatherText} key=\"locationWeather\"/>\r\n            )}\r\n        </div>\r\n        </div>\r\n    )}\r\n\r\nexport default LocationDetails\r\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Home from './components/Home';\nimport LocationDetails from './components/LocationDetails';\n\nfunction App() {\n\n  return (\n    <div>\n      <div className=\"container-fluid p-0\">\n          <Nav/>\n      </div>\n\n      <BrowserRouter>\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/LocationDetails/:locationKey' exact component={LocationDetails} />\n        </Switch>\n      </BrowserRouter>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}